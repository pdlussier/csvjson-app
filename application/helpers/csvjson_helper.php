<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');// CSVJSON helper functions/** * generateUniqueId * * @return	string	Unique alpha-numeric key */if (!function_exists('generateUniqueId')) {	function generateUniqueId() {		return md5($_SERVER['REMOTE_ADDR'].uniqid());	}}/** * uploadFileIsValid * * @param	string	filename being uploaded. Should be a key in $_FILES. * @param	string or NULL	Expected mime type. Optional when set to NULL. * @return	TRUE or string	TRUE if valid, or error message string upon failure. */if (!function_exists('uploadFileIsValid')) {	function uploadFileIsValid($filename, $expectedMime=NULL) {			if ($_FILES[$filename]['error'] !== UPLOAD_ERR_OK ||			!is_uploaded_file($_FILES[$filename]['tmp_name'])) {			return "Uplaod error: ".$_FILES[$filename]['error'];		}				if ($expectedMime) {			$mime = $this->getMimeType($_FILES[$filename]['tmp_name']);			if (!strpos($mime, $expectedMime) === 0)				return 'File upload '.$_FILES[$filename]['tmp_name']." invalid mime type: $mime. Expecting: $expectedMime";		}		return TRUE;	}}/** * getMimeType * * @param	string	filename being uploaded. Should be a key in $_FILES. * @return	string	Mime type. */if (!function_exists('getMimeType')) {	function getMimeType($file) {		if (ENVIRONMENT == 'development') return 'text/plain';		$file = escapeshellarg($file);		$mime = shell_exec("file -bi " . $file);		return $mime;	}}/** * ajaxJsonReply * * @param	string	Value to return in JSON. * @param	bool	TRUE if we return a success (200), or FALSE if we return an error (400). * @return	nothing */if (!function_exists('ajaxJsonReply')) {	function ajaxJsonReply($result, $success=TRUE) {		header('Expires: -1');		if ($success == FALSE) header("HTTP/1.0 400 Bad Request");		header('Content-Type: application/json; charset=utf-8');		header('Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0');		header('Pragma: no-cache');				echo json_encode($result);	}}if (!function_exists('getJson')) {  function getJson($arguments, $required=array()) {    foreach ($required as $argument) {      if (!in_array($argument, $arguments)) {        throw new Exception("Required argument '$argument' is not found in the arguments list!");      }    }    $raw = file_get_contents("php://input");    $data = json_decode($raw, TRUE);    if ($data === NULL) {      throw new Exception("Error trying to parse JSON payload");    }        $result = array();    foreach ($arguments as $argument) {      if (!array_key_exists($argument, $data) && in_array($argument, $required)) {        throw new Exception("Missing argument '$argument'!");      }      $result[$argument] = isset($data[$argument]) ? xss_clean($data[$argument]) : NULL;      // Cast to ints when ints (one level deep only!)      if ($result[$argument] !== NULL && (string)(int)$result[$argument] == $result[$argument]) $result[$argument] = (int)$result[$argument];      if (is_array($result[$argument])) {        foreach ($result[$argument] as $k => $v) {          if ((string)(int)$v == $v) $result[$argument][$k] = (int)$v;        }      }    }    return $result;  }}